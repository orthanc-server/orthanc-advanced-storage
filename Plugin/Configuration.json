{
  "AdvancedStorage": {
    
    // Enables/disables the plugin (disabled by default)
    "Enable": false,

    // Enables/disables support for multiple StorageDirectories (disabled by default).
    // Note: when saving a file, the plugin stores only the storage-id in the SQL DB.
    // Therefore, storage path may change in case you move your data from one place to another.
    // The storage ids may never change since they are stored in DB; you can only add new ones.
    // You should use very short strings as they are stored in DB for each attachment.
    "MultipleStorages" : {
      "Storages" : {
        "1" : "/mnt/disk1/orthanc",
        "2" : "/mnt/disk2/orthanc"
      },

      // The storage id on which new data is stored.
      // Note: There's currently no automatic changes of disks so you need to change
      // the CurrentWriteStorage manually when the current disks gets full.
      "CurrentWriteStorage" : "2"
    },

    // Defines the storage structure and file namings.  
    // These keywords can be used to generate the path:
    // Attachment info:
    //   {UUID}                           : A unique file identifier
    //   {01(UUID)}                       : The first 2 characters of the file UUID
    //   {23(UUID)}                       : The 3rd and 4th characters of the file UUID
    //   {.ext}                           : The file extension
    // DICOM TAGS:
    //   {PatientID}, {PatientName}, {PatientBirthDate}
    //   {StudyInstanceUID}, {SeriesInstanceUID}, {SOPInstanceUID}
    //   {StudyDescription}, {SeriesDescription}
    //   {StudyDate}, {AccessionNumber}, {InstanceNumber}, {SeriesNumber}
    // Transformed DICOM TAGS:
    //   {split(StudyDate)}               : 3 subfolders: YYYY/MM/DD
    //   {split(PatientBirthDate)}        : 3 subfolders: YYYY/MM/DD
    //   {pad4(InstanceNumber)}           : the instance number padded with zeroes to have 4 characters
    //   {pad4(SeriesNumber)}             : the instance number padded with zeroes to have 4 characters
    //   {pad6(InstanceNumber)}           : the instance number padded with zeroes to have 6 characters
    //   {pad6(SeriesNumber)}             : the instance number padded with zeroes to have 6 characters
    //   {pad8(InstanceNumber)}           : the instance number padded with zeroes to have 8 characters
    //   {pad8(SeriesNumber)}             : the instance number padded with zeroes to have 8 characters
    // Orthanc IDs:
    //   {OrthancPatientID}, {OrthancStudyID}, {OrthancSeriesID}, {OrthancInstanceID}
    // Transformed Orthanc IDs:
    //   {01(OrthancPatientID)}, {01(OrthancStudyID)}, ...  : the first 2 characters of the Orthanc ID
    //   {23(OrthancPatientID)}, {23(OrthancStudyID)}, ...  : the 3rd and 4th characters of the Orthanc ID
    // Examples:
    // "OrthancDefault"                         is a special value to use the same structure as the Orthanc core.  
    //                                          This option consumes less space in the SQL DB since the path must not be saved in DB.
    // "{01(UUID)}/{23(UUID)}/{UUID}{.ext}"     is equivalent with the structure of the Orthanc core with and added file extension
    // "{split(StudyDate)}/{StudyInstanceUID} - {PatientID}/{SeriesInstanceUID}/{pad6(InstanceNumber)} - {UUID}{.ext}"
    // "{PatientID} - {PatientName}/{StudyDate} - {StudyInstanceUID} - {StudyDescription}/{SeriesInstanceUID}/{UUID}{.ext}"
    // Notes:
    // - To prevent files from being overwritten, it is very important that their path is unique !
    //   Therefore, your NamingScheme must always include:
    //   - either the file {UUID} (this is mandatory in this Beta version !!!!!)
    //   - If you have not set "OverwriteInstances" to true, at least:
    //     - a patient identifier {PatientID} or {OrthancPatientID},
    //     - a study identifier {StudyInstanceUID} or {OrthancStudyID},
    //     - a series identifier {SeriesInstanceUID} or {OrthancSeriesID},
    //     - an instance identifier {SOPInstanceUID} or {OrthancInstanceID}
    // - The NamingScheme defines a RELATIVE path to either the "StorageDirectory" of Orthanc or one of
    //   the "MultipleStorages" of this plugin.
    // - The relative path generated from the NamingScheme is stored in the SQL DB.  Therefore, you may change the
    //   NamingScheme at any time and you'll still be able to access previously saved files.
    "NamingScheme" : "OrthancDefault",

    // Defines the maximum length for path used in the storage.  If a file is longer
    // than this limit, it is stored with the default orthanc naming scheme
    // (and a warning is issued).
    // Note, on Windows, the maximum path length is 260 bytes by default but can be increased
    // through a configuration.
    "MaxPathLength" : 256,

    // When saving non DICOM attachments, Orthanc does not have access to the DICOM tags
    // and can therefore not compute a path using the NamingScheme.
    // Therefore, all non DICOM attachements are grouped in a subfolder using the 
    // legacy structure.  With this option, you can define a root folder for these 
    // non DICOM attachments
    // e.g: "OtherAttachmentsPrefix": "_attachments"
    // Notes:
    // - When using a prefix, the path is saved in the SQL DB.  Therefore, you may change the OtherAttachmentsPrefix
    // at any time and you'll still be able to access previously saved files.
    "OtherAttachmentsPrefix": "",

    // This is the Indexer mode configuration.  Folders are scanned for DICOM files.
    // Any DICOM file that is found is adopted by Orthanc which means that Orthanc will only
    // reference it but will never delete it.
    // This replaces the former orthanc-indexer plugin.
    "Indexer" : {
      // Set "Enable" to true to enable the indexer
      "Enable": false,
      
      // List of folders to scan
      "Folders": [ "/tmp/dicom-files" ],
      
      // Interval (in seconds) between the end of a scan and the start of the next scan.
      "Interval": 10,

      // Interval (in milliseconds) between the handling of 2 scanned files.  This reduces the
      // workload on Orthanc while scanning files.
      "ThrottleDelayMs": 0,

      // The list of file extensions to parse while indexing.  Any extension not in this list will not be parsed.
      // This option can not be used together with "SkippedExtensions".
      "ParsedExtensions": [],

      // The list of file extensions to skip from indexing.  Any file ending with one of these extensions will not be parsed.
      // This option can not be used together with "ParsedExtensions"
      "SkippedExtensions": [],

      // Whether the files that are indexed will belong to Orthanc.
      // If a file belongs to Orthanc, the file will be deleted when the related resource
      // (patient/study/series/instance) is deleted.
      "TakeOwnership": false
    },
    
    // This is the Delayed Deletion mode configuration.  On some file systems, file deletions might
    // be slow.  When the delayed deletion moe is enabled, when Orthanc needs to delete a file,
    // the file is scheduled for later deletion and the delete operation seems fast from the user point of view.
    // Orthanc will then delete all scheduled files asynchronously. 
    // This replaces the former delayed-deletion plugin.
    "DelayedDeletion": {
      // Set "Enable" to true to enable the delayed deletion moe
      "Enable": false,

      // Interval (in milliseconds) between the deletion of 2 scheduled files.  This reduces the
      // workload on the disk while deleting files.
      "ThrottleDelayMs": 0
    }
  }
}